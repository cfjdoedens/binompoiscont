% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dbinom_continuous.R, R/qbinom_continuous.R
\name{dbinom_continuous}
\alias{dbinom_continuous}
\title{Continuous version of dbinom(k, n, p, log = FALSE)}
\usage{
dbinom_continuous(k, n, p, log = FALSE)

dbinom_continuous(k, n, p, log = FALSE)
}
\arguments{
\item{k}{a vector of 1 or more non negative real numbers;
so k can be a non integer number >= 0; k <= n}

\item{n}{a vector of 1 or more positive real numbers;
so n can be a non integer number >= 0; k <= n}

\item{p}{a vector of 1 or more real numbers in [0, 1]}

\item{log}{TRUE or FALSE}

\item{certainty}{a vector of 1 or more non negative real numbers;
so k can be a non integer number >= 0; k <= n}
}
\value{
A real number in [0, 1], which represents the chance of observing k
successes in n trials, each with probability p.

A real number in [0, 1], which represents the cumulative chance density
of observing k
successes in n trials, each with probability p.
}
\description{
dbinom_continuous(k, n, p, log = FALSE) is a continuous version of
dbinom(k, n, p, log = FALSE).
In dbinom(k, n, p, log = FALSE), k and n are restricted to be non
negative whole numbers, with k <= n.
In dbinom_continuous(k, n, p, log = FALSE), both k and n can be any non
negative real number. The restriction k <= n still holds.

dbinom(k, n, p) is the probability of k successes in n trials, each with
probability p.
How to interpret this when k and n are not whole numbers?
So, how to interpret dbinom_continuous(k, n, p) for non integer values of
n and k?

The problem I want to tackle with this continuous binomial distribution is
to assess the probability of the result of n monetary unit samples drawn from
a monetary mass, given we know p, the total fraction of
errors of the monetary mass. We then take k to be the sum of the
fractions of errors in the n samples. So this explains
a non integer k. The non integer n can be used for the case where the
monetary interval used is not a whole integer multiple of the total
monetary mass.

Not only is dbinom_continuous(k, n, p) continuous in k and n,
whereas dbinom(k, n, p) is not; dbinom_continuous is also different from dbinom
in the way vector arguments of length > 1 are treated.
dbinom() allows for a mix of lengths for k, n and p.
This makes
the semantics of the function less clear.
Therefore with dbinom_continuous, only one of k and n and p can have a length > 1.

Mathematically we know that dbinom(k, n, p) equals
dbeta(p, k + 1, n - k + 1) / (n + 1). This we use below to implement
dbinom_continuous().

pbinom_continuous(certainty, n, p, log = FALSE) is a continuous version of
pbinom(certainty, n, p, log = FALSE).
In pbinom(certainty, n, p, log = FALSE), n is restricted to be a non
negative whole number.
In pbinom_continuous(certainty, n, p, log = FALSE), n can be any non
negative real number.

pbinom_continuous(certainty, n, p, log = FALSE) is the
cumulative density function of a continuous version of the binomial
chance density function, given n samples from a mass with a fraction
of p errors.

The problem I want to tackle with this continuous binomial distribution is
to assess the probability of the result of n monetary unit samples drawn from
a monetary mass, given we know p, the total fraction of
errors of the monetary mass. We then take k to be the sum of the
fractions of errors in the n samples. So this explains
a non integer k. The non integer n can be used for the case where the
monetary interval used is not a whole integer multiple of the total
monetary mass.

Not only is pbinom_continuous(certainty, n, p) continuous in n,
whereas pbinom(certainty, n, p) is not; pbinom_continuous is also different from pbinom
in the way vector arguments of length > 1 are treated.
pbinom() allows for a mix of lengths for certainty, n and p.
This makes
the semantics of the function less clear.
Therefore with pbinom_continuous, only one of certainty and n and p can have a length > 1.

Mathematically we know that pbinom(certainty, n, p) equals
pbeta(certainty, k + 1, n - k + 1) / (n + 1). This we use below to implement
dbinom_continuous().
}
\examples{
  dbinom_continuous(0, 300, 0.01)
  dbinom_continuous(0, 300, 0.01)
}
